server {
  resolver 127.0.0.1 valid=300s;
  resolver_timeout 2s;
  listen            80;
  error_page 404 /notfound;

  location / {
   auth_request /auth;
   set $upstream 'unset';
   echo_location /kubeapi;
   rewrite_by_lua_block {
   local res = ngx.location.capture("/kubeapi")
      local cjson = require "cjson"
      local decBody = cjson.decode(res.body);
      local contextRoot = "/api/" .. decBody["items"][1].metadata.labels.version .. "/" .. decBody["items"][1].metadata.labels.contextRoot
      local contextLength = string.len(contextRoot)
      for i = 1, #decBody.items do
        if contextRoot == string.sub(ngx.var.uri,1, contextLength) then
          ngx.var.upstream = "https://" .. decBody["items"][1].spec.selector.app .. ".default.svc.cluster.local"
        end
      end
      if  ngx.var.upstream  == "unset" then
        ngx.var.upstream = "http://localhost/notfound"
      end
      --ngx.var.upstream = contextRoot
   }
   proxy_pass $upstream;
   proxy_ssl_certificate          /usr/local/openresty/nginx/config/cert.pem;
   proxy_ssl_trusted_certificate  /usr/local/openresty/nginx/config/ca.pem;
   proxy_ssl_certificate_key      /usr/local/openresty/nginx/config/key.pem;
   proxy_read_timeout 5s;
   proxy_connect_timeout 5s;
   proxy_set_header x-host-upstream $upstream;
  }
  location /todo {
      proxy_pass "http://todo.default.svc.cluster.local";
      #proxy_pass http://localhost:81;
  }

  location /notfound {
      content_by_lua '
        local cjson = require "cjson"
        ngx.status = 404
        ngx.header.content_type = "application/json"
      ngx.say(cjson.encode({ error = "notfound" }))
      ';
  }
  location /kubeapi {
    set_by_lua $token '
       local open = io.open
        local function read_file(path)
          local file = open(path, "rb") -- r read mode and b binary mode
          if not file then return nil end
          local content = file:read "*a" -- *a or *all reads the whole file
          file:close()
          return content
       end
       token = read_file("/var/run/secrets/kubernetes.io/serviceaccount/token");
       return "Bearer " .. token
    ';
    #echo "token: $token";
    proxy_ssl_trusted_certificate  /var/run/secrets/kubernetes.io/serviceaccount/ca.crt;
    proxy_set_header Authorization "$token";
    proxy_pass https://kubernetes.default/api/v1/services?labelSelector=type%3Dms;
    access_by_lua_block {
      --ngx.say("hi")
      local res = ngx.location.capture("/kubeapi")
      local cjson = require "cjson"
      local decBody = cjson.decode(res.body);
      ngx.say(cjson.encode(decBody["items"][1].metadata.labels.contextRoot))
    }
  }
  location /auth {
      content_by_lua '
           local apiKey = ngx.req.get_headers()["x-api-key"]
           --ngx.log(ngx.DEBUG, "Value of API key is: " .. apiKey)
           if apiKey ~= nil then
                      ngx.log(ngx.DEBUG, "Inside apikey if")
             if apiKey ~= "12345" then
              ngx.status = 403
             end
           else
            ngx.status = 403
           end
      ';
  }
}